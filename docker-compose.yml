version: '3.8'
# docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
services:
  publisher:
    image: andriiuni/events
    restart: always
    env_file:
      - .env
    depends_on:
      - gateway
    ports:
      - '8080:8080'

  nginx:
    restart: always
    image: nginx:latest
    container_name: nginx
    expose:
      - '80'
    depends_on:
      - gateway
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf

  postgres:
    image: postgres:10.21
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: 'root'
      POSTGRES_DB: universe-group
      POSTGRES_USER: dev
      POSTGRES_PORT: 5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 10s
      retries: 5
      timeout: 5s

  db-migrator:
    build:
      context: ./services/ttk-collector
    command: npx prisma migrate deploy
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=postgresql://dev:root@postgres:5432/universe-group
    volumes:
      - ./prisma:/app/prisma

  nats:
    image: nats
    container_name: nats
    restart: always
    command: -js -c /etc/nats/nats.conf
    ports:
      - '4222:4222'
    volumes:
      - ./config/nats/nats.conf:/etc/nats/nats.conf
      - nats-data:/data
    healthcheck:
      test: ['CMD-SHELL', 'nc -z localhost 4222']
      interval: 10s
      timeout: 5s
      retries: 5

  gateway:
    build:
      context: .
      dockerfile: ./services/gateway/Dockerfile
    command: ['npm', 'run', 'start:dev']
    expose:
      - '3000'
    depends_on:
      - nats
    volumes:
      - ./services/gateway:/app
      - ./services/gateway/node_modules:/app/node_modules
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://ttk-collector:3001/healthz']
      interval: 10s
      retries: 5
      timeout: 5s

  ttk-collector:
    build:
      context: .
      dockerfile: ./services/ttk-collector/Dockerfile
    command:
      [
        'bash',
        './wait-for-it.sh',
        'http://gateway:3000/healthz',
        'npm',
        'run',
        'start:dev',
      ]
    expose:
      - '3001'
    env_file:
      - .env
    depends_on:
      - postgres
      - gateway
    volumes:
      - ./services/ttk-collector:/app
      - ./services/ttk-collector/node_modules:/app/node_modules
      - ./prisma:/app/prisma
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://ttk-collector:3001/healthz']
      interval: 10s
      retries: 5
      timeout: 5s

  fb-collector:
    build:
      context: .
      dockerfile: ./services/fb-collector/Dockerfile
    command:
      [
        'bash',
        './wait-for-it.sh',
        'http://gateway:3000/healthz',
        'npm',
        'run',
        'start:dev',
      ]
    expose:
      - '3002'
    env_file:
      - .env
    depends_on:
      - postgres
      - gateway
    volumes:
      - ./services/fb-collector:/app
      - ./services/fb-collector/node_modules:/app/node_modules
      - ./prisma:/app/prisma
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://ttk-collector:3001/healthz']
      interval: 10s
      retries: 5
      timeout: 5s

  reporter:
    build:
      context: .
      dockerfile: ./services/reporter/Dockerfile
    command: ['npm', 'run', 'start:dev']
    ports:
      - '3003:3003'
    env_file:
      - .env
    depends_on:
      - postgres
    volumes:
      - ./services/reporter:/app
      - ./services/reporter/node_modules:/app/node_modules
      - ./prisma:/app/prisma
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://reporter:3003/healthz']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    user: '65534:65534'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - '9090:9090'

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - '3005:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

volumes:
  postgres-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local
  nats-data:
    driver: local
