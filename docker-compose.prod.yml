version: '3.8'

services:
  publisher:
    image: andriiuni/events
    restart: always
    env_file:
      - .env
    depends_on:
      gateway:
        condition: service_healthy
    ports:
      - '8080:8080'

  nginx:
    restart: unless-stopped
    image: nginx:alpine
    container_name: nginx
    expose:
      - '80'
    depends_on:
      gateway:
        condition: service_healthy
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf

  postgres:
    image: postgres:16
    container_name: postgres
    expose:
      - '5432'
    env_file:
      - .env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U dev -d universe-group']
      interval: 5s
      timeout: 5s
      retries: 5

  db-migrator:
    build:
      context: .
      dockerfile: ./services/ttk-collector/Dockerfile
    command: npx prisma migrate deploy
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./prisma:/app/prisma

  nats:
    image: nats
    container_name: nats
    restart: unless-stopped
    command: -js -c /etc/nats/nats.conf
    ports:
      - '4222:4222'
    volumes:
      - ./config/nats/nats.conf:/etc/nats/nats.conf
      - nats-data:/data

  gateway:
    build:
      context: .
      dockerfile: ./services/gateway/Dockerfile
    restart: unless-stopped
    expose:
      - '3000'
    depends_on:
      - nats
    deploy:
      replicas: 3
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://gateway:3000/healthz']
      interval: 10s
      retries: 5
      timeout: 5s

  ttk-collector:
    build:
      context: .
      dockerfile: ./services/ttk-collector/Dockerfile
    restart: unless-stopped
    expose:
      - '3001'
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      gateway:
        condition: service_healthy
    deploy:
      replicas: 3
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://ttk-collector:3001/healthz']
      interval: 10s
      retries: 5
      timeout: 5s

  fb-collector:
    build:
      context: .
      dockerfile: ./services/fb-collector/Dockerfile
    restart: unless-stopped
    expose:
      - '3002'
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      gateway:
        condition: service_healthy
    deploy:
      replicas: 3
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://fb-collector:3002/healthz']
      interval: 10s
      retries: 5
      timeout: 5s

  reporter:
    build:
      context: .
      dockerfile: ./services/reporter/Dockerfile
    restart: unless-stopped
    ports:
      - '3003:3003'
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://reporter:3003/healthz']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    user: '65534:65534'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    expose:
      - '9090'

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - '3005:3000'
    env_file:
      - .env
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

volumes:
  postgres-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local
  nats-data:
    driver: local
